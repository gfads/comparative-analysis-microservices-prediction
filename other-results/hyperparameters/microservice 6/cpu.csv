,10,20,30,40,50,60
arima," ARIMA(2,1,3)(0,0,0)[0]          "," ARIMA(2,1,3)(0,0,0)[0]          "," ARIMA(2,1,3)(0,0,0)[0]          "," ARIMA(2,1,3)(0,0,0)[0]          "," ARIMA(2,1,3)(0,0,0)[0]          "," ARIMA(2,1,3)(0,0,0)[0]          "
da-rnn,"{'training': True, '_parameters': OrderedDict(), '_buffers': OrderedDict(), '_non_persistent_buffers_set': set(), '_backward_hooks': OrderedDict(), '_is_full_backward_hook': None, '_forward_hooks': OrderedDict(), '_forward_pre_hooks': OrderedDict(), '_state_dict_hooks': OrderedDict(), '_load_state_dict_pre_hooks': OrderedDict(), '_load_state_dict_post_hooks': OrderedDict(), '_modules': OrderedDict([('encoder', Encoder(
  (WU_e): Linear(in_features=42, out_features=10, bias=False)
  (v_e): Linear(in_features=10, out_features=1, bias=False)
  (lstm): LSTM(1, 16)
)), ('decoder', Decoder(
  (WU_d): Linear(in_features=48, out_features=16, bias=False)
  (v_d): Linear(in_features=16, out_features=1, bias=False)
  (wb_tilde): Linear(in_features=17, out_features=1, bias=False)
  (lstm): LSTM(1, 16)
  (Wb): Linear(in_features=32, out_features=16, bias=True)
  (vb): Linear(in_features=16, out_features=1, bias=True)
))]), 'y_dim': 1}","{'training': True, '_parameters': OrderedDict(), '_buffers': OrderedDict(), '_non_persistent_buffers_set': set(), '_backward_hooks': OrderedDict(), '_is_full_backward_hook': None, '_forward_hooks': OrderedDict(), '_forward_pre_hooks': OrderedDict(), '_state_dict_hooks': OrderedDict(), '_load_state_dict_pre_hooks': OrderedDict(), '_load_state_dict_post_hooks': OrderedDict(), '_modules': OrderedDict([('encoder', Encoder(
  (WU_e): Linear(in_features=84, out_features=20, bias=False)
  (v_e): Linear(in_features=20, out_features=1, bias=False)
  (lstm): LSTM(1, 32)
)), ('decoder', Decoder(
  (WU_d): Linear(in_features=96, out_features=32, bias=False)
  (v_d): Linear(in_features=32, out_features=1, bias=False)
  (wb_tilde): Linear(in_features=33, out_features=1, bias=False)
  (lstm): LSTM(1, 32)
  (Wb): Linear(in_features=64, out_features=32, bias=True)
  (vb): Linear(in_features=32, out_features=1, bias=True)
))]), 'y_dim': 1}","{'training': True, '_parameters': OrderedDict(), '_buffers': OrderedDict(), '_non_persistent_buffers_set': set(), '_backward_hooks': OrderedDict(), '_is_full_backward_hook': None, '_forward_hooks': OrderedDict(), '_forward_pre_hooks': OrderedDict(), '_state_dict_hooks': OrderedDict(), '_load_state_dict_pre_hooks': OrderedDict(), '_load_state_dict_post_hooks': OrderedDict(), '_modules': OrderedDict([('encoder', Encoder(
  (WU_e): Linear(in_features=62, out_features=30, bias=False)
  (v_e): Linear(in_features=30, out_features=1, bias=False)
  (lstm): LSTM(1, 16)
)), ('decoder', Decoder(
  (WU_d): Linear(in_features=48, out_features=16, bias=False)
  (v_d): Linear(in_features=16, out_features=1, bias=False)
  (wb_tilde): Linear(in_features=17, out_features=1, bias=False)
  (lstm): LSTM(1, 16)
  (Wb): Linear(in_features=32, out_features=16, bias=True)
  (vb): Linear(in_features=16, out_features=1, bias=True)
))]), 'y_dim': 1}","{'training': True, '_parameters': OrderedDict(), '_buffers': OrderedDict(), '_non_persistent_buffers_set': set(), '_backward_hooks': OrderedDict(), '_is_full_backward_hook': None, '_forward_hooks': OrderedDict(), '_forward_pre_hooks': OrderedDict(), '_state_dict_hooks': OrderedDict(), '_load_state_dict_pre_hooks': OrderedDict(), '_load_state_dict_post_hooks': OrderedDict(), '_modules': OrderedDict([('encoder', Encoder(
  (WU_e): Linear(in_features=168, out_features=40, bias=False)
  (v_e): Linear(in_features=40, out_features=1, bias=False)
  (lstm): LSTM(1, 64)
)), ('decoder', Decoder(
  (WU_d): Linear(in_features=192, out_features=64, bias=False)
  (v_d): Linear(in_features=64, out_features=1, bias=False)
  (wb_tilde): Linear(in_features=65, out_features=1, bias=False)
  (lstm): LSTM(1, 64)
  (Wb): Linear(in_features=128, out_features=64, bias=True)
  (vb): Linear(in_features=64, out_features=1, bias=True)
))]), 'y_dim': 1}","{'training': True, '_parameters': OrderedDict(), '_buffers': OrderedDict(), '_non_persistent_buffers_set': set(), '_backward_hooks': OrderedDict(), '_is_full_backward_hook': None, '_forward_hooks': OrderedDict(), '_forward_pre_hooks': OrderedDict(), '_state_dict_hooks': OrderedDict(), '_load_state_dict_pre_hooks': OrderedDict(), '_load_state_dict_post_hooks': OrderedDict(), '_modules': OrderedDict([('encoder', Encoder(
  (WU_e): Linear(in_features=178, out_features=50, bias=False)
  (v_e): Linear(in_features=50, out_features=1, bias=False)
  (lstm): LSTM(1, 64)
)), ('decoder', Decoder(
  (WU_d): Linear(in_features=192, out_features=64, bias=False)
  (v_d): Linear(in_features=64, out_features=1, bias=False)
  (wb_tilde): Linear(in_features=65, out_features=1, bias=False)
  (lstm): LSTM(1, 64)
  (Wb): Linear(in_features=128, out_features=64, bias=True)
  (vb): Linear(in_features=64, out_features=1, bias=True)
))]), 'y_dim': 1}","{'training': True, '_parameters': OrderedDict(), '_buffers': OrderedDict(), '_non_persistent_buffers_set': set(), '_backward_hooks': OrderedDict(), '_is_full_backward_hook': None, '_forward_hooks': OrderedDict(), '_forward_pre_hooks': OrderedDict(), '_state_dict_hooks': OrderedDict(), '_load_state_dict_pre_hooks': OrderedDict(), '_load_state_dict_post_hooks': OrderedDict(), '_modules': OrderedDict([('encoder', Encoder(
  (WU_e): Linear(in_features=92, out_features=60, bias=False)
  (v_e): Linear(in_features=60, out_features=1, bias=False)
  (lstm): LSTM(1, 16)
)), ('decoder', Decoder(
  (WU_d): Linear(in_features=48, out_features=16, bias=False)
  (v_d): Linear(in_features=16, out_features=1, bias=False)
  (wb_tilde): Linear(in_features=17, out_features=1, bias=False)
  (lstm): LSTM(1, 16)
  (Wb): Linear(in_features=32, out_features=16, bias=True)
  (vb): Linear(in_features=16, out_features=1, bias=True)
))]), 'y_dim': 1}"
deep-ar,"{'prediction_length': 1, 'lead_time': 0, 'input_names': ['feat_static_cat', 'feat_static_real', 'past_time_feat', 'past_target', 'past_observed_values', 'future_time_feat', 'past_is_pad'], 'prediction_net': DeepARPredictionNetwork(
  (proj_distr_args): ArgProj(
    (domain_map): HybridLambda(domain_map)
  )
  (rnn): HybridSequentialRNNCell(
  (0): ZoneoutCell(p_out=0.0, p_state=0.1, LSTMCell(21 -> 160))
  (1): ZoneoutCell(p_out=0.0, p_state=0.1, ResidualCell(LSTMCell(40 -> 160)))
  (2): ZoneoutCell(p_out=0.0, p_state=0.1, ResidualCell(LSTMCell(40 -> 160)))
  )
  (embedder): FeatureEmbedder(
  
  )
  (scaler): MeanScaler(
  
  )
), 'batch_size': 64, 'input_transform': <gluonts.transform._base.Chain object at 0x7fdacce7ed30>, 'forecast_generator': gluonts.model.forecast_generator.SampleForecastGenerator(), 'output_transform': None, 'ctx': cpu(0), 'dtype': <class 'numpy.float32'>}","{'prediction_length': 1, 'lead_time': 0, 'input_names': ['feat_static_cat', 'feat_static_real', 'past_time_feat', 'past_target', 'past_observed_values', 'future_time_feat', 'past_is_pad'], 'prediction_net': DeepARPredictionNetwork(
  (proj_distr_args): ArgProj(
    (domain_map): HybridLambda(domain_map)
  )
  (rnn): HybridSequentialRNNCell(
  (0): ZoneoutCell(p_out=0.0, p_state=0.1, LSTMCell(21 -> 160))
  (1): ZoneoutCell(p_out=0.0, p_state=0.1, ResidualCell(LSTMCell(40 -> 160)))
  (2): ZoneoutCell(p_out=0.0, p_state=0.1, ResidualCell(LSTMCell(40 -> 160)))
  )
  (embedder): FeatureEmbedder(
  
  )
  (scaler): MeanScaler(
  
  )
), 'batch_size': 64, 'input_transform': <gluonts.transform._base.Chain object at 0x7fdaccbe3940>, 'forecast_generator': gluonts.model.forecast_generator.SampleForecastGenerator(), 'output_transform': None, 'ctx': cpu(0), 'dtype': <class 'numpy.float32'>}","{'prediction_length': 1, 'lead_time': 0, 'input_names': ['feat_static_cat', 'feat_static_real', 'past_time_feat', 'past_target', 'past_observed_values', 'future_time_feat', 'past_is_pad'], 'prediction_net': DeepARPredictionNetwork(
  (proj_distr_args): ArgProj(
    (domain_map): HybridLambda(domain_map)
  )
  (rnn): HybridSequentialRNNCell(
  (0): ZoneoutCell(p_out=0.0, p_state=0.1, LSTMCell(21 -> 160))
  (1): ZoneoutCell(p_out=0.0, p_state=0.1, ResidualCell(LSTMCell(40 -> 160)))
  (2): ZoneoutCell(p_out=0.0, p_state=0.1, ResidualCell(LSTMCell(40 -> 160)))
  )
  (embedder): FeatureEmbedder(
  
  )
  (scaler): MeanScaler(
  
  )
), 'batch_size': 64, 'input_transform': <gluonts.transform._base.Chain object at 0x7fdace63c8b0>, 'forecast_generator': gluonts.model.forecast_generator.SampleForecastGenerator(), 'output_transform': None, 'ctx': cpu(0), 'dtype': <class 'numpy.float32'>}","{'prediction_length': 1, 'lead_time': 0, 'input_names': ['feat_static_cat', 'feat_static_real', 'past_time_feat', 'past_target', 'past_observed_values', 'future_time_feat', 'past_is_pad'], 'prediction_net': DeepARPredictionNetwork(
  (proj_distr_args): ArgProj(
    (domain_map): HybridLambda(domain_map)
  )
  (rnn): HybridSequentialRNNCell(
  (0): ZoneoutCell(p_out=0.0, p_state=0.1, LSTMCell(21 -> 160))
  (1): ZoneoutCell(p_out=0.0, p_state=0.1, ResidualCell(LSTMCell(40 -> 160)))
  (2): ZoneoutCell(p_out=0.0, p_state=0.1, ResidualCell(LSTMCell(40 -> 160)))
  )
  (embedder): FeatureEmbedder(
  
  )
  (scaler): MeanScaler(
  
  )
), 'batch_size': 64, 'input_transform': <gluonts.transform._base.Chain object at 0x7fdace91df40>, 'forecast_generator': gluonts.model.forecast_generator.SampleForecastGenerator(), 'output_transform': None, 'ctx': cpu(0), 'dtype': <class 'numpy.float32'>}","{'prediction_length': 1, 'lead_time': 0, 'input_names': ['feat_static_cat', 'feat_static_real', 'past_time_feat', 'past_target', 'past_observed_values', 'future_time_feat', 'past_is_pad'], 'prediction_net': DeepARPredictionNetwork(
  (proj_distr_args): ArgProj(
    (domain_map): HybridLambda(domain_map)
  )
  (rnn): HybridSequentialRNNCell(
  (0): ZoneoutCell(p_out=0.0, p_state=0.1, LSTMCell(21 -> 160))
  (1): ZoneoutCell(p_out=0.0, p_state=0.1, ResidualCell(LSTMCell(40 -> 160)))
  (2): ZoneoutCell(p_out=0.0, p_state=0.1, ResidualCell(LSTMCell(40 -> 160)))
  )
  (embedder): FeatureEmbedder(
  
  )
  (scaler): MeanScaler(
  
  )
), 'batch_size': 64, 'input_transform': <gluonts.transform._base.Chain object at 0x7fdacce4f430>, 'forecast_generator': gluonts.model.forecast_generator.SampleForecastGenerator(), 'output_transform': None, 'ctx': cpu(0), 'dtype': <class 'numpy.float32'>}","{'prediction_length': 1, 'lead_time': 0, 'input_names': ['feat_static_cat', 'feat_static_real', 'past_time_feat', 'past_target', 'past_observed_values', 'future_time_feat', 'past_is_pad'], 'prediction_net': DeepARPredictionNetwork(
  (proj_distr_args): ArgProj(
    (domain_map): HybridLambda(domain_map)
  )
  (rnn): HybridSequentialRNNCell(
  (0): ZoneoutCell(p_out=0.0, p_state=0.1, LSTMCell(21 -> 160))
  (1): ZoneoutCell(p_out=0.0, p_state=0.1, ResidualCell(LSTMCell(40 -> 160)))
  (2): ZoneoutCell(p_out=0.0, p_state=0.1, ResidualCell(LSTMCell(40 -> 160)))
  )
  (embedder): FeatureEmbedder(
  
  )
  (scaler): MeanScaler(
  
  )
), 'batch_size': 64, 'input_transform': <gluonts.transform._base.Chain object at 0x7fdacfb6aac0>, 'forecast_generator': gluonts.model.forecast_generator.SampleForecastGenerator(), 'output_transform': None, 'ctx': cpu(0), 'dtype': <class 'numpy.float32'>}"
deep-state,"{'prediction_length': 1, 'lead_time': 0, 'input_names': ['feat_static_cat', 'past_observed_values', 'past_seasonal_indicators', 'past_time_feat', 'past_target', 'future_seasonal_indicators', 'future_time_feat'], 'prediction_net': DeepStatePredictionNetwork(
  (prior_mean_model): Dense(40 -> 13, linear)
  (prior_cov_diag_model): Dense(40 -> 13, Activation(sigmoid))
  (lstm): HybridSequentialRNNCell(
  (0): ZoneoutCell(p_out=0.0, p_state=0.1, LSTMCell(3 -> 160))
  (1): ZoneoutCell(p_out=0.0, p_state=0.1, ResidualCell(LSTMCell(40 -> 160)))
  )
  (lds_proj): LDSArgsProj(
    (dense_noise_std): Dense(40 -> 1, Activation(sigmoid))
    (dense_innovation): Dense(40 -> 1, Activation(sigmoid))
    (dense_residual): Dense(40 -> 1, linear)
  )
  (embedder): FeatureEmbedder(
  
  )
  (scaler): MeanScaler(
  
  )
), 'batch_size': 32, 'input_transform': <gluonts.transform._base.Chain object at 0x7fdace5ecee0>, 'forecast_generator': gluonts.model.forecast_generator.SampleForecastGenerator(), 'output_transform': None, 'ctx': cpu(0), 'dtype': <class 'numpy.float32'>}","{'prediction_length': 1, 'lead_time': 0, 'input_names': ['feat_static_cat', 'past_observed_values', 'past_seasonal_indicators', 'past_time_feat', 'past_target', 'future_seasonal_indicators', 'future_time_feat'], 'prediction_net': DeepStatePredictionNetwork(
  (prior_mean_model): Dense(40 -> 13, linear)
  (prior_cov_diag_model): Dense(40 -> 13, Activation(sigmoid))
  (lstm): HybridSequentialRNNCell(
  (0): ZoneoutCell(p_out=0.0, p_state=0.1, LSTMCell(3 -> 160))
  (1): ZoneoutCell(p_out=0.0, p_state=0.1, ResidualCell(LSTMCell(40 -> 160)))
  )
  (lds_proj): LDSArgsProj(
    (dense_noise_std): Dense(40 -> 1, Activation(sigmoid))
    (dense_innovation): Dense(40 -> 1, Activation(sigmoid))
    (dense_residual): Dense(40 -> 1, linear)
  )
  (embedder): FeatureEmbedder(
  
  )
  (scaler): MeanScaler(
  
  )
), 'batch_size': 32, 'input_transform': <gluonts.transform._base.Chain object at 0x7fdb8f5091f0>, 'forecast_generator': gluonts.model.forecast_generator.SampleForecastGenerator(), 'output_transform': None, 'ctx': cpu(0), 'dtype': <class 'numpy.float32'>}","{'prediction_length': 1, 'lead_time': 0, 'input_names': ['feat_static_cat', 'past_observed_values', 'past_seasonal_indicators', 'past_time_feat', 'past_target', 'future_seasonal_indicators', 'future_time_feat'], 'prediction_net': DeepStatePredictionNetwork(
  (prior_mean_model): Dense(40 -> 13, linear)
  (prior_cov_diag_model): Dense(40 -> 13, Activation(sigmoid))
  (lstm): HybridSequentialRNNCell(
  (0): ZoneoutCell(p_out=0.0, p_state=0.1, LSTMCell(3 -> 160))
  (1): ZoneoutCell(p_out=0.0, p_state=0.1, ResidualCell(LSTMCell(40 -> 160)))
  )
  (lds_proj): LDSArgsProj(
    (dense_noise_std): Dense(40 -> 1, Activation(sigmoid))
    (dense_innovation): Dense(40 -> 1, Activation(sigmoid))
    (dense_residual): Dense(40 -> 1, linear)
  )
  (embedder): FeatureEmbedder(
  
  )
  (scaler): MeanScaler(
  
  )
), 'batch_size': 32, 'input_transform': <gluonts.transform._base.Chain object at 0x7fdacdc871c0>, 'forecast_generator': gluonts.model.forecast_generator.SampleForecastGenerator(), 'output_transform': None, 'ctx': cpu(0), 'dtype': <class 'numpy.float32'>}","{'prediction_length': 1, 'lead_time': 0, 'input_names': ['feat_static_cat', 'past_observed_values', 'past_seasonal_indicators', 'past_time_feat', 'past_target', 'future_seasonal_indicators', 'future_time_feat'], 'prediction_net': DeepStatePredictionNetwork(
  (prior_mean_model): Dense(40 -> 13, linear)
  (prior_cov_diag_model): Dense(40 -> 13, Activation(sigmoid))
  (lstm): HybridSequentialRNNCell(
  (0): ZoneoutCell(p_out=0.0, p_state=0.1, LSTMCell(3 -> 160))
  (1): ZoneoutCell(p_out=0.0, p_state=0.1, ResidualCell(LSTMCell(40 -> 160)))
  )
  (lds_proj): LDSArgsProj(
    (dense_noise_std): Dense(40 -> 1, Activation(sigmoid))
    (dense_innovation): Dense(40 -> 1, Activation(sigmoid))
    (dense_residual): Dense(40 -> 1, linear)
  )
  (embedder): FeatureEmbedder(
  
  )
  (scaler): MeanScaler(
  
  )
), 'batch_size': 32, 'input_transform': <gluonts.transform._base.Chain object at 0x7fdad4442160>, 'forecast_generator': gluonts.model.forecast_generator.SampleForecastGenerator(), 'output_transform': None, 'ctx': cpu(0), 'dtype': <class 'numpy.float32'>}","{'prediction_length': 1, 'lead_time': 0, 'input_names': ['feat_static_cat', 'past_observed_values', 'past_seasonal_indicators', 'past_time_feat', 'past_target', 'future_seasonal_indicators', 'future_time_feat'], 'prediction_net': DeepStatePredictionNetwork(
  (prior_mean_model): Dense(40 -> 13, linear)
  (prior_cov_diag_model): Dense(40 -> 13, Activation(sigmoid))
  (lstm): HybridSequentialRNNCell(
  (0): ZoneoutCell(p_out=0.0, p_state=0.1, LSTMCell(3 -> 160))
  (1): ZoneoutCell(p_out=0.0, p_state=0.1, ResidualCell(LSTMCell(40 -> 160)))
  )
  (lds_proj): LDSArgsProj(
    (dense_noise_std): Dense(40 -> 1, Activation(sigmoid))
    (dense_innovation): Dense(40 -> 1, Activation(sigmoid))
    (dense_residual): Dense(40 -> 1, linear)
  )
  (embedder): FeatureEmbedder(
  
  )
  (scaler): MeanScaler(
  
  )
), 'batch_size': 32, 'input_transform': <gluonts.transform._base.Chain object at 0x7fdacf1f6910>, 'forecast_generator': gluonts.model.forecast_generator.SampleForecastGenerator(), 'output_transform': None, 'ctx': cpu(0), 'dtype': <class 'numpy.float32'>}","{'prediction_length': 1, 'lead_time': 0, 'input_names': ['feat_static_cat', 'past_observed_values', 'past_seasonal_indicators', 'past_time_feat', 'past_target', 'future_seasonal_indicators', 'future_time_feat'], 'prediction_net': DeepStatePredictionNetwork(
  (prior_mean_model): Dense(40 -> 13, linear)
  (prior_cov_diag_model): Dense(40 -> 13, Activation(sigmoid))
  (lstm): HybridSequentialRNNCell(
  (0): ZoneoutCell(p_out=0.0, p_state=0.1, LSTMCell(3 -> 160))
  (1): ZoneoutCell(p_out=0.0, p_state=0.1, ResidualCell(LSTMCell(40 -> 160)))
  )
  (lds_proj): LDSArgsProj(
    (dense_noise_std): Dense(40 -> 1, Activation(sigmoid))
    (dense_innovation): Dense(40 -> 1, Activation(sigmoid))
    (dense_residual): Dense(40 -> 1, linear)
  )
  (embedder): FeatureEmbedder(
  
  )
  (scaler): MeanScaler(
  
  )
), 'batch_size': 32, 'input_transform': <gluonts.transform._base.Chain object at 0x7fdb94664670>, 'forecast_generator': gluonts.model.forecast_generator.SampleForecastGenerator(), 'output_transform': None, 'ctx': cpu(0), 'dtype': <class 'numpy.float32'>}"
lstm,"Model: ""sequential_11""
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 lstm_61 (LSTM)              (None, 10, 50)            10400     
                                                                 
 lstm_62 (LSTM)              (None, 10, 50)            20200     
                                                                 
 lstm_63 (LSTM)              (None, 10, 50)            20200     
                                                                 
 lstm_64 (LSTM)              (None, 50)                20200     
                                                                 
 dense_11 (Dense)            (None, 1)                 51        
                                                                 
=================================================================
Total params: 71,051
Trainable params: 71,051
Non-trainable params: 0
_________________________________________________________________
","Model: ""sequential_11""
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 lstm_61 (LSTM)              (None, 10, 50)            10400     
                                                                 
 lstm_62 (LSTM)              (None, 10, 50)            20200     
                                                                 
 lstm_63 (LSTM)              (None, 10, 50)            20200     
                                                                 
 lstm_64 (LSTM)              (None, 50)                20200     
                                                                 
 dense_11 (Dense)            (None, 1)                 51        
                                                                 
=================================================================
Total params: 71,051
Trainable params: 71,051
Non-trainable params: 0
_________________________________________________________________
Model: ""sequential_41""
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 lstm_206 (LSTM)             (None, 20, 50)            10400     
                                                                 
 lstm_207 (LSTM)             (None, 20, 50)            20200     
                                                                 
 lstm_208 (LSTM)             (None, 50)                20200     
                                                                 
 dense_41 (Dense)            (None, 1)                 51        
                                                                 
=================================================================
Total params: 50,851
Trainable params: 50,851
Non-trainable params: 0
_________________________________________________________________
","Model: ""sequential_11""
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 lstm_61 (LSTM)              (None, 10, 50)            10400     
                                                                 
 lstm_62 (LSTM)              (None, 10, 50)            20200     
                                                                 
 lstm_63 (LSTM)              (None, 10, 50)            20200     
                                                                 
 lstm_64 (LSTM)              (None, 50)                20200     
                                                                 
 dense_11 (Dense)            (None, 1)                 51        
                                                                 
=================================================================
Total params: 71,051
Trainable params: 71,051
Non-trainable params: 0
_________________________________________________________________
Model: ""sequential_41""
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 lstm_206 (LSTM)             (None, 20, 50)            10400     
                                                                 
 lstm_207 (LSTM)             (None, 20, 50)            20200     
                                                                 
 lstm_208 (LSTM)             (None, 50)                20200     
                                                                 
 dense_41 (Dense)            (None, 1)                 51        
                                                                 
=================================================================
Total params: 50,851
Trainable params: 50,851
Non-trainable params: 0
_________________________________________________________________
Model: ""sequential_27""
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 lstm_129 (LSTM)             (None, 30, 50)            10400     
                                                                 
 lstm_130 (LSTM)             (None, 30, 50)            20200     
                                                                 
 lstm_131 (LSTM)             (None, 30, 50)            20200     
                                                                 
 lstm_132 (LSTM)             (None, 50)                20200     
                                                                 
 dense_27 (Dense)            (None, 1)                 51        
                                                                 
=================================================================
Total params: 71,051
Trainable params: 71,051
Non-trainable params: 0
_________________________________________________________________
","Model: ""sequential_11""
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 lstm_61 (LSTM)              (None, 10, 50)            10400     
                                                                 
 lstm_62 (LSTM)              (None, 10, 50)            20200     
                                                                 
 lstm_63 (LSTM)              (None, 10, 50)            20200     
                                                                 
 lstm_64 (LSTM)              (None, 50)                20200     
                                                                 
 dense_11 (Dense)            (None, 1)                 51        
                                                                 
=================================================================
Total params: 71,051
Trainable params: 71,051
Non-trainable params: 0
_________________________________________________________________
Model: ""sequential_41""
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 lstm_206 (LSTM)             (None, 20, 50)            10400     
                                                                 
 lstm_207 (LSTM)             (None, 20, 50)            20200     
                                                                 
 lstm_208 (LSTM)             (None, 50)                20200     
                                                                 
 dense_41 (Dense)            (None, 1)                 51        
                                                                 
=================================================================
Total params: 50,851
Trainable params: 50,851
Non-trainable params: 0
_________________________________________________________________
Model: ""sequential_27""
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 lstm_129 (LSTM)             (None, 30, 50)            10400     
                                                                 
 lstm_130 (LSTM)             (None, 30, 50)            20200     
                                                                 
 lstm_131 (LSTM)             (None, 30, 50)            20200     
                                                                 
 lstm_132 (LSTM)             (None, 50)                20200     
                                                                 
 dense_27 (Dense)            (None, 1)                 51        
                                                                 
=================================================================
Total params: 71,051
Trainable params: 71,051
Non-trainable params: 0
_________________________________________________________________
Model: ""sequential_44""
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 lstm_217 (LSTM)             (None, 40, 125)           63500     
                                                                 
 lstm_218 (LSTM)             (None, 40, 125)           125500    
                                                                 
 lstm_219 (LSTM)             (None, 40, 125)           125500    
                                                                 
 lstm_220 (LSTM)             (None, 40, 125)           125500    
                                                                 
 lstm_221 (LSTM)             (None, 40, 125)           125500    
                                                                 
 lstm_222 (LSTM)             (None, 125)               125500    
                                                                 
 dense_44 (Dense)            (None, 1)                 126       
                                                                 
=================================================================
Total params: 691,126
Trainable params: 691,126
Non-trainable params: 0
_________________________________________________________________
","Model: ""sequential_11""
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 lstm_61 (LSTM)              (None, 10, 50)            10400     
                                                                 
 lstm_62 (LSTM)              (None, 10, 50)            20200     
                                                                 
 lstm_63 (LSTM)              (None, 10, 50)            20200     
                                                                 
 lstm_64 (LSTM)              (None, 50)                20200     
                                                                 
 dense_11 (Dense)            (None, 1)                 51        
                                                                 
=================================================================
Total params: 71,051
Trainable params: 71,051
Non-trainable params: 0
_________________________________________________________________
Model: ""sequential_41""
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 lstm_206 (LSTM)             (None, 20, 50)            10400     
                                                                 
 lstm_207 (LSTM)             (None, 20, 50)            20200     
                                                                 
 lstm_208 (LSTM)             (None, 50)                20200     
                                                                 
 dense_41 (Dense)            (None, 1)                 51        
                                                                 
=================================================================
Total params: 50,851
Trainable params: 50,851
Non-trainable params: 0
_________________________________________________________________
Model: ""sequential_27""
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 lstm_129 (LSTM)             (None, 30, 50)            10400     
                                                                 
 lstm_130 (LSTM)             (None, 30, 50)            20200     
                                                                 
 lstm_131 (LSTM)             (None, 30, 50)            20200     
                                                                 
 lstm_132 (LSTM)             (None, 50)                20200     
                                                                 
 dense_27 (Dense)            (None, 1)                 51        
                                                                 
=================================================================
Total params: 71,051
Trainable params: 71,051
Non-trainable params: 0
_________________________________________________________________
Model: ""sequential_44""
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 lstm_217 (LSTM)             (None, 40, 125)           63500     
                                                                 
 lstm_218 (LSTM)             (None, 40, 125)           125500    
                                                                 
 lstm_219 (LSTM)             (None, 40, 125)           125500    
                                                                 
 lstm_220 (LSTM)             (None, 40, 125)           125500    
                                                                 
 lstm_221 (LSTM)             (None, 40, 125)           125500    
                                                                 
 lstm_222 (LSTM)             (None, 125)               125500    
                                                                 
 dense_44 (Dense)            (None, 1)                 126       
                                                                 
=================================================================
Total params: 691,126
Trainable params: 691,126
Non-trainable params: 0
_________________________________________________________________
Model: ""sequential_49""
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 lstm_250 (LSTM)             (None, 50, 50)            10400     
                                                                 
 lstm_251 (LSTM)             (None, 50, 50)            20200     
                                                                 
 lstm_252 (LSTM)             (None, 50)                20200     
                                                                 
 dense_49 (Dense)            (None, 1)                 51        
                                                                 
=================================================================
Total params: 50,851
Trainable params: 50,851
Non-trainable params: 0
_________________________________________________________________
","Model: ""sequential_11""
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 lstm_61 (LSTM)              (None, 10, 50)            10400     
                                                                 
 lstm_62 (LSTM)              (None, 10, 50)            20200     
                                                                 
 lstm_63 (LSTM)              (None, 10, 50)            20200     
                                                                 
 lstm_64 (LSTM)              (None, 50)                20200     
                                                                 
 dense_11 (Dense)            (None, 1)                 51        
                                                                 
=================================================================
Total params: 71,051
Trainable params: 71,051
Non-trainable params: 0
_________________________________________________________________
Model: ""sequential_41""
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 lstm_206 (LSTM)             (None, 20, 50)            10400     
                                                                 
 lstm_207 (LSTM)             (None, 20, 50)            20200     
                                                                 
 lstm_208 (LSTM)             (None, 50)                20200     
                                                                 
 dense_41 (Dense)            (None, 1)                 51        
                                                                 
=================================================================
Total params: 50,851
Trainable params: 50,851
Non-trainable params: 0
_________________________________________________________________
Model: ""sequential_27""
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 lstm_129 (LSTM)             (None, 30, 50)            10400     
                                                                 
 lstm_130 (LSTM)             (None, 30, 50)            20200     
                                                                 
 lstm_131 (LSTM)             (None, 30, 50)            20200     
                                                                 
 lstm_132 (LSTM)             (None, 50)                20200     
                                                                 
 dense_27 (Dense)            (None, 1)                 51        
                                                                 
=================================================================
Total params: 71,051
Trainable params: 71,051
Non-trainable params: 0
_________________________________________________________________
Model: ""sequential_44""
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 lstm_217 (LSTM)             (None, 40, 125)           63500     
                                                                 
 lstm_218 (LSTM)             (None, 40, 125)           125500    
                                                                 
 lstm_219 (LSTM)             (None, 40, 125)           125500    
                                                                 
 lstm_220 (LSTM)             (None, 40, 125)           125500    
                                                                 
 lstm_221 (LSTM)             (None, 40, 125)           125500    
                                                                 
 lstm_222 (LSTM)             (None, 125)               125500    
                                                                 
 dense_44 (Dense)            (None, 1)                 126       
                                                                 
=================================================================
Total params: 691,126
Trainable params: 691,126
Non-trainable params: 0
_________________________________________________________________
Model: ""sequential_49""
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 lstm_250 (LSTM)             (None, 50, 50)            10400     
                                                                 
 lstm_251 (LSTM)             (None, 50, 50)            20200     
                                                                 
 lstm_252 (LSTM)             (None, 50)                20200     
                                                                 
 dense_49 (Dense)            (None, 1)                 51        
                                                                 
=================================================================
Total params: 50,851
Trainable params: 50,851
Non-trainable params: 0
_________________________________________________________________
Model: ""sequential_55""
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 lstm_273 (LSTM)             (None, 60, 125)           63500     
                                                                 
 lstm_274 (LSTM)             (None, 60, 125)           125500    
                                                                 
 lstm_275 (LSTM)             (None, 125)               125500    
                                                                 
 dense_55 (Dense)            (None, 1)                 126       
                                                                 
=================================================================
Total params: 314,626
Trainable params: 314,626
Non-trainable params: 0
_________________________________________________________________
"
tft,"{'prediction_length': 1, 'lead_time': 0, 'input_names': ['past_target', 'past_observed_values', 'past_feat_dynamic_real', 'past_feat_dynamic_cat', 'feat_dynamic_real', 'feat_dynamic_cat', 'feat_static_real', 'feat_static_cat'], 'prediction_net': TemporalFusionTransformerPredictionNetwork(
  (target_proj): Dense(1 -> 32, linear)
  (past_feat_dynamic_proj): FeatureProjector(
  
  )
  (past_feat_dynamic_embed): FeatureEmbedder(
  
  )
  (feat_dynamic_proj): FeatureProjector(
  
  )
  (feat_dynamic_embed): FeatureEmbedder(
  
  )
  (feat_static_proj): FeatureProjector(
  
  )
  (feat_static_embed): FeatureEmbedder(
  
  )
  (static_selector): VariableSelectionNetwork(
    (weight_network): GatedResidualNetwork(
      (skip_proj): Dense(64 -> 2, linear)
      (mlp): HybridSequential(
        (0): Dense(64 -> 32, linear)
        (1): ELU(
        
        )
        (2): Dense(32 -> 32, linear)
        (3): Dropout(p = 0.3, axes=())
        (4): Dense(32 -> 4, linear)
        (5): GatedLinearUnit(
        
        )
      )
      (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=2)
    )
  )
  (ctx_selector): VariableSelectionNetwork(
    (weight_network): GatedResidualNetwork(
      (skip_proj): Dense(160 -> 5, linear)
      (mlp): HybridSequential(
        (0): Dense(192 -> 32, linear)
        (1): ELU(
        
        )
        (2): Dense(32 -> 32, linear)
        (3): Dropout(p = 0.3, axes=())
        (4): Dense(32 -> 10, linear)
        (5): GatedLinearUnit(
        
        )
      )
      (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=5)
    )
  )
  (tgt_selector): VariableSelectionNetwork(
    (weight_network): GatedResidualNetwork(
      (skip_proj): Dense(64 -> 2, linear)
      (mlp): HybridSequential(
        (0): Dense(96 -> 32, linear)
        (1): ELU(
        
        )
        (2): Dense(32 -> 32, linear)
        (3): Dropout(p = 0.3, axes=())
        (4): Dense(32 -> 4, linear)
        (5): GatedLinearUnit(
        
        )
      )
      (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=2)
    )
  )
  (selection): GatedResidualNetwork(
    (mlp): HybridSequential(
      (0): Dense(32 -> 32, linear)
      (1): ELU(
      
      )
      (2): Dense(32 -> 32, linear)
      (3): Dropout(p = 0.3, axes=())
      (4): Dense(32 -> 64, linear)
      (5): GatedLinearUnit(
      
      )
    )
    (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
  )
  (enrichment): GatedResidualNetwork(
    (mlp): HybridSequential(
      (0): Dense(32 -> 32, linear)
      (1): ELU(
      
      )
      (2): Dense(32 -> 32, linear)
      (3): Dropout(p = 0.3, axes=())
      (4): Dense(32 -> 64, linear)
      (5): GatedLinearUnit(
      
      )
    )
    (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
  )
  (state_h): GatedResidualNetwork(
    (mlp): HybridSequential(
      (0): Dense(32 -> 32, linear)
      (1): ELU(
      
      )
      (2): Dense(32 -> 32, linear)
      (3): Dropout(p = 0.3, axes=())
      (4): Dense(32 -> 64, linear)
      (5): GatedLinearUnit(
      
      )
    )
    (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
  )
  (state_c): GatedResidualNetwork(
    (mlp): HybridSequential(
      (0): Dense(32 -> 32, linear)
      (1): ELU(
      
      )
      (2): Dense(32 -> 32, linear)
      (3): Dropout(p = 0.3, axes=())
      (4): Dense(32 -> 64, linear)
      (5): GatedLinearUnit(
      
      )
    )
    (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
  )
  (temporal_encoder): TemporalFusionEncoder(
    (encoder_lstm): HybridSequentialRNNCell(
    (0): LSTMCell(32 -> 128)
    )
    (decoder_lstm): HybridSequentialRNNCell(
    (0): LSTMCell(32 -> 128)
    )
    (gate): HybridSequential(
      (0): Dense(32 -> 64, linear)
      (1): GatedLinearUnit(
      
      )
    )
    (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
  )
  (temporal_decoder): TemporalFusionDecoder(
    (enrich): GatedResidualNetwork(
      (mlp): HybridSequential(
        (0): Dense(64 -> 32, linear)
        (1): ELU(
        
        )
        (2): Dense(32 -> 32, linear)
        (3): Dropout(p = 0.3, axes=())
        (4): Dense(32 -> 64, linear)
        (5): GatedLinearUnit(
        
        )
      )
      (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
    )
    (attention): SelfAttention(
      (dropout): Dropout(p = 0.3, axes=())
      (q_proj): Dense(32 -> 32, linear)
      (k_proj): Dense(32 -> 32, linear)
      (v_proj): Dense(32 -> 32, linear)
      (out_proj): Dense(32 -> 32, linear)
    )
    (att_net): HybridSequential(
      (0): Dropout(p = 0.3, axes=())
      (1): Dense(32 -> 64, linear)
      (2): GatedLinearUnit(
      
      )
    )
    (att_lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
    (ff_net): HybridSequential(
      (0): GatedResidualNetwork(
        (mlp): HybridSequential(
          (0): Dense(32 -> 32, linear)
          (1): ELU(
          
          )
          (2): Dense(32 -> 32, linear)
          (3): Dropout(p = 0.3, axes=())
          (4): Dense(32 -> 64, linear)
          (5): GatedLinearUnit(
          
          )
        )
        (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
      )
      (1): Dense(32 -> 64, linear)
      (2): GatedLinearUnit(
      
      )
    )
    (ff_lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
  )
  (output_proj): Dense(32 -> 3, linear)
  (loss): QuantileLoss(batch_axis=0, w=None)
), 'batch_size': 32, 'input_transform': <gluonts.transform._base.Chain object at 0x7fdacf30f7c0>, 'forecast_generator': <gluonts.model.forecast_generator.QuantileForecastGenerator object at 0x7fdacf30f400>, 'output_transform': None, 'ctx': cpu(0), 'dtype': <class 'numpy.float32'>}","{'prediction_length': 1, 'lead_time': 0, 'input_names': ['past_target', 'past_observed_values', 'past_feat_dynamic_real', 'past_feat_dynamic_cat', 'feat_dynamic_real', 'feat_dynamic_cat', 'feat_static_real', 'feat_static_cat'], 'prediction_net': TemporalFusionTransformerPredictionNetwork(
  (target_proj): Dense(1 -> 32, linear)
  (past_feat_dynamic_proj): FeatureProjector(
  
  )
  (past_feat_dynamic_embed): FeatureEmbedder(
  
  )
  (feat_dynamic_proj): FeatureProjector(
  
  )
  (feat_dynamic_embed): FeatureEmbedder(
  
  )
  (feat_static_proj): FeatureProjector(
  
  )
  (feat_static_embed): FeatureEmbedder(
  
  )
  (static_selector): VariableSelectionNetwork(
    (weight_network): GatedResidualNetwork(
      (skip_proj): Dense(64 -> 2, linear)
      (mlp): HybridSequential(
        (0): Dense(64 -> 32, linear)
        (1): ELU(
        
        )
        (2): Dense(32 -> 32, linear)
        (3): Dropout(p = 0.4, axes=())
        (4): Dense(32 -> 4, linear)
        (5): GatedLinearUnit(
        
        )
      )
      (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=2)
    )
  )
  (ctx_selector): VariableSelectionNetwork(
    (weight_network): GatedResidualNetwork(
      (skip_proj): Dense(160 -> 5, linear)
      (mlp): HybridSequential(
        (0): Dense(192 -> 32, linear)
        (1): ELU(
        
        )
        (2): Dense(32 -> 32, linear)
        (3): Dropout(p = 0.4, axes=())
        (4): Dense(32 -> 10, linear)
        (5): GatedLinearUnit(
        
        )
      )
      (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=5)
    )
  )
  (tgt_selector): VariableSelectionNetwork(
    (weight_network): GatedResidualNetwork(
      (skip_proj): Dense(64 -> 2, linear)
      (mlp): HybridSequential(
        (0): Dense(96 -> 32, linear)
        (1): ELU(
        
        )
        (2): Dense(32 -> 32, linear)
        (3): Dropout(p = 0.4, axes=())
        (4): Dense(32 -> 4, linear)
        (5): GatedLinearUnit(
        
        )
      )
      (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=2)
    )
  )
  (selection): GatedResidualNetwork(
    (mlp): HybridSequential(
      (0): Dense(32 -> 32, linear)
      (1): ELU(
      
      )
      (2): Dense(32 -> 32, linear)
      (3): Dropout(p = 0.4, axes=())
      (4): Dense(32 -> 64, linear)
      (5): GatedLinearUnit(
      
      )
    )
    (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
  )
  (enrichment): GatedResidualNetwork(
    (mlp): HybridSequential(
      (0): Dense(32 -> 32, linear)
      (1): ELU(
      
      )
      (2): Dense(32 -> 32, linear)
      (3): Dropout(p = 0.4, axes=())
      (4): Dense(32 -> 64, linear)
      (5): GatedLinearUnit(
      
      )
    )
    (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
  )
  (state_h): GatedResidualNetwork(
    (mlp): HybridSequential(
      (0): Dense(32 -> 32, linear)
      (1): ELU(
      
      )
      (2): Dense(32 -> 32, linear)
      (3): Dropout(p = 0.4, axes=())
      (4): Dense(32 -> 64, linear)
      (5): GatedLinearUnit(
      
      )
    )
    (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
  )
  (state_c): GatedResidualNetwork(
    (mlp): HybridSequential(
      (0): Dense(32 -> 32, linear)
      (1): ELU(
      
      )
      (2): Dense(32 -> 32, linear)
      (3): Dropout(p = 0.4, axes=())
      (4): Dense(32 -> 64, linear)
      (5): GatedLinearUnit(
      
      )
    )
    (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
  )
  (temporal_encoder): TemporalFusionEncoder(
    (encoder_lstm): HybridSequentialRNNCell(
    (0): LSTMCell(32 -> 128)
    )
    (decoder_lstm): HybridSequentialRNNCell(
    (0): LSTMCell(32 -> 128)
    )
    (gate): HybridSequential(
      (0): Dense(32 -> 64, linear)
      (1): GatedLinearUnit(
      
      )
    )
    (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
  )
  (temporal_decoder): TemporalFusionDecoder(
    (enrich): GatedResidualNetwork(
      (mlp): HybridSequential(
        (0): Dense(64 -> 32, linear)
        (1): ELU(
        
        )
        (2): Dense(32 -> 32, linear)
        (3): Dropout(p = 0.4, axes=())
        (4): Dense(32 -> 64, linear)
        (5): GatedLinearUnit(
        
        )
      )
      (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
    )
    (attention): SelfAttention(
      (dropout): Dropout(p = 0.4, axes=())
      (q_proj): Dense(32 -> 32, linear)
      (k_proj): Dense(32 -> 32, linear)
      (v_proj): Dense(32 -> 32, linear)
      (out_proj): Dense(32 -> 32, linear)
    )
    (att_net): HybridSequential(
      (0): Dropout(p = 0.4, axes=())
      (1): Dense(32 -> 64, linear)
      (2): GatedLinearUnit(
      
      )
    )
    (att_lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
    (ff_net): HybridSequential(
      (0): GatedResidualNetwork(
        (mlp): HybridSequential(
          (0): Dense(32 -> 32, linear)
          (1): ELU(
          
          )
          (2): Dense(32 -> 32, linear)
          (3): Dropout(p = 0.4, axes=())
          (4): Dense(32 -> 64, linear)
          (5): GatedLinearUnit(
          
          )
        )
        (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
      )
      (1): Dense(32 -> 64, linear)
      (2): GatedLinearUnit(
      
      )
    )
    (ff_lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
  )
  (output_proj): Dense(32 -> 3, linear)
  (loss): QuantileLoss(batch_axis=0, w=None)
), 'batch_size': 32, 'input_transform': <gluonts.transform._base.Chain object at 0x7fdadc0a5430>, 'forecast_generator': <gluonts.model.forecast_generator.QuantileForecastGenerator object at 0x7fdadc0a56d0>, 'output_transform': None, 'ctx': cpu(0), 'dtype': <class 'numpy.float32'>}","{'prediction_length': 1, 'lead_time': 0, 'input_names': ['past_target', 'past_observed_values', 'past_feat_dynamic_real', 'past_feat_dynamic_cat', 'feat_dynamic_real', 'feat_dynamic_cat', 'feat_static_real', 'feat_static_cat'], 'prediction_net': TemporalFusionTransformerPredictionNetwork(
  (target_proj): Dense(1 -> 32, linear)
  (past_feat_dynamic_proj): FeatureProjector(
  
  )
  (past_feat_dynamic_embed): FeatureEmbedder(
  
  )
  (feat_dynamic_proj): FeatureProjector(
  
  )
  (feat_dynamic_embed): FeatureEmbedder(
  
  )
  (feat_static_proj): FeatureProjector(
  
  )
  (feat_static_embed): FeatureEmbedder(
  
  )
  (static_selector): VariableSelectionNetwork(
    (weight_network): GatedResidualNetwork(
      (skip_proj): Dense(64 -> 2, linear)
      (mlp): HybridSequential(
        (0): Dense(64 -> 32, linear)
        (1): ELU(
        
        )
        (2): Dense(32 -> 32, linear)
        (3): Dropout(p = 0.3, axes=())
        (4): Dense(32 -> 4, linear)
        (5): GatedLinearUnit(
        
        )
      )
      (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=2)
    )
  )
  (ctx_selector): VariableSelectionNetwork(
    (weight_network): GatedResidualNetwork(
      (skip_proj): Dense(160 -> 5, linear)
      (mlp): HybridSequential(
        (0): Dense(192 -> 32, linear)
        (1): ELU(
        
        )
        (2): Dense(32 -> 32, linear)
        (3): Dropout(p = 0.3, axes=())
        (4): Dense(32 -> 10, linear)
        (5): GatedLinearUnit(
        
        )
      )
      (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=5)
    )
  )
  (tgt_selector): VariableSelectionNetwork(
    (weight_network): GatedResidualNetwork(
      (skip_proj): Dense(64 -> 2, linear)
      (mlp): HybridSequential(
        (0): Dense(96 -> 32, linear)
        (1): ELU(
        
        )
        (2): Dense(32 -> 32, linear)
        (3): Dropout(p = 0.3, axes=())
        (4): Dense(32 -> 4, linear)
        (5): GatedLinearUnit(
        
        )
      )
      (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=2)
    )
  )
  (selection): GatedResidualNetwork(
    (mlp): HybridSequential(
      (0): Dense(32 -> 32, linear)
      (1): ELU(
      
      )
      (2): Dense(32 -> 32, linear)
      (3): Dropout(p = 0.3, axes=())
      (4): Dense(32 -> 64, linear)
      (5): GatedLinearUnit(
      
      )
    )
    (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
  )
  (enrichment): GatedResidualNetwork(
    (mlp): HybridSequential(
      (0): Dense(32 -> 32, linear)
      (1): ELU(
      
      )
      (2): Dense(32 -> 32, linear)
      (3): Dropout(p = 0.3, axes=())
      (4): Dense(32 -> 64, linear)
      (5): GatedLinearUnit(
      
      )
    )
    (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
  )
  (state_h): GatedResidualNetwork(
    (mlp): HybridSequential(
      (0): Dense(32 -> 32, linear)
      (1): ELU(
      
      )
      (2): Dense(32 -> 32, linear)
      (3): Dropout(p = 0.3, axes=())
      (4): Dense(32 -> 64, linear)
      (5): GatedLinearUnit(
      
      )
    )
    (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
  )
  (state_c): GatedResidualNetwork(
    (mlp): HybridSequential(
      (0): Dense(32 -> 32, linear)
      (1): ELU(
      
      )
      (2): Dense(32 -> 32, linear)
      (3): Dropout(p = 0.3, axes=())
      (4): Dense(32 -> 64, linear)
      (5): GatedLinearUnit(
      
      )
    )
    (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
  )
  (temporal_encoder): TemporalFusionEncoder(
    (encoder_lstm): HybridSequentialRNNCell(
    (0): LSTMCell(32 -> 128)
    )
    (decoder_lstm): HybridSequentialRNNCell(
    (0): LSTMCell(32 -> 128)
    )
    (gate): HybridSequential(
      (0): Dense(32 -> 64, linear)
      (1): GatedLinearUnit(
      
      )
    )
    (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
  )
  (temporal_decoder): TemporalFusionDecoder(
    (enrich): GatedResidualNetwork(
      (mlp): HybridSequential(
        (0): Dense(64 -> 32, linear)
        (1): ELU(
        
        )
        (2): Dense(32 -> 32, linear)
        (3): Dropout(p = 0.3, axes=())
        (4): Dense(32 -> 64, linear)
        (5): GatedLinearUnit(
        
        )
      )
      (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
    )
    (attention): SelfAttention(
      (dropout): Dropout(p = 0.3, axes=())
      (q_proj): Dense(32 -> 32, linear)
      (k_proj): Dense(32 -> 32, linear)
      (v_proj): Dense(32 -> 8, linear)
      (out_proj): Dense(32 -> 32, linear)
    )
    (att_net): HybridSequential(
      (0): Dropout(p = 0.3, axes=())
      (1): Dense(32 -> 64, linear)
      (2): GatedLinearUnit(
      
      )
    )
    (att_lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
    (ff_net): HybridSequential(
      (0): GatedResidualNetwork(
        (mlp): HybridSequential(
          (0): Dense(32 -> 32, linear)
          (1): ELU(
          
          )
          (2): Dense(32 -> 32, linear)
          (3): Dropout(p = 0.3, axes=())
          (4): Dense(32 -> 64, linear)
          (5): GatedLinearUnit(
          
          )
        )
        (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
      )
      (1): Dense(32 -> 64, linear)
      (2): GatedLinearUnit(
      
      )
    )
    (ff_lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
  )
  (output_proj): Dense(32 -> 3, linear)
  (loss): QuantileLoss(batch_axis=0, w=None)
), 'batch_size': 32, 'input_transform': <gluonts.transform._base.Chain object at 0x7fdace2cad00>, 'forecast_generator': <gluonts.model.forecast_generator.QuantileForecastGenerator object at 0x7fdace2ca9d0>, 'output_transform': None, 'ctx': cpu(0), 'dtype': <class 'numpy.float32'>}","{'prediction_length': 1, 'lead_time': 0, 'input_names': ['past_target', 'past_observed_values', 'past_feat_dynamic_real', 'past_feat_dynamic_cat', 'feat_dynamic_real', 'feat_dynamic_cat', 'feat_static_real', 'feat_static_cat'], 'prediction_net': TemporalFusionTransformerPredictionNetwork(
  (target_proj): Dense(1 -> 32, linear)
  (past_feat_dynamic_proj): FeatureProjector(
  
  )
  (past_feat_dynamic_embed): FeatureEmbedder(
  
  )
  (feat_dynamic_proj): FeatureProjector(
  
  )
  (feat_dynamic_embed): FeatureEmbedder(
  
  )
  (feat_static_proj): FeatureProjector(
  
  )
  (feat_static_embed): FeatureEmbedder(
  
  )
  (static_selector): VariableSelectionNetwork(
    (weight_network): GatedResidualNetwork(
      (skip_proj): Dense(64 -> 2, linear)
      (mlp): HybridSequential(
        (0): Dense(64 -> 32, linear)
        (1): ELU(
        
        )
        (2): Dense(32 -> 32, linear)
        (3): Dropout(p = 0.1, axes=())
        (4): Dense(32 -> 4, linear)
        (5): GatedLinearUnit(
        
        )
      )
      (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=2)
    )
  )
  (ctx_selector): VariableSelectionNetwork(
    (weight_network): GatedResidualNetwork(
      (skip_proj): Dense(160 -> 5, linear)
      (mlp): HybridSequential(
        (0): Dense(192 -> 32, linear)
        (1): ELU(
        
        )
        (2): Dense(32 -> 32, linear)
        (3): Dropout(p = 0.1, axes=())
        (4): Dense(32 -> 10, linear)
        (5): GatedLinearUnit(
        
        )
      )
      (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=5)
    )
  )
  (tgt_selector): VariableSelectionNetwork(
    (weight_network): GatedResidualNetwork(
      (skip_proj): Dense(64 -> 2, linear)
      (mlp): HybridSequential(
        (0): Dense(96 -> 32, linear)
        (1): ELU(
        
        )
        (2): Dense(32 -> 32, linear)
        (3): Dropout(p = 0.1, axes=())
        (4): Dense(32 -> 4, linear)
        (5): GatedLinearUnit(
        
        )
      )
      (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=2)
    )
  )
  (selection): GatedResidualNetwork(
    (mlp): HybridSequential(
      (0): Dense(32 -> 32, linear)
      (1): ELU(
      
      )
      (2): Dense(32 -> 32, linear)
      (3): Dropout(p = 0.1, axes=())
      (4): Dense(32 -> 64, linear)
      (5): GatedLinearUnit(
      
      )
    )
    (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
  )
  (enrichment): GatedResidualNetwork(
    (mlp): HybridSequential(
      (0): Dense(32 -> 32, linear)
      (1): ELU(
      
      )
      (2): Dense(32 -> 32, linear)
      (3): Dropout(p = 0.1, axes=())
      (4): Dense(32 -> 64, linear)
      (5): GatedLinearUnit(
      
      )
    )
    (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
  )
  (state_h): GatedResidualNetwork(
    (mlp): HybridSequential(
      (0): Dense(32 -> 32, linear)
      (1): ELU(
      
      )
      (2): Dense(32 -> 32, linear)
      (3): Dropout(p = 0.1, axes=())
      (4): Dense(32 -> 64, linear)
      (5): GatedLinearUnit(
      
      )
    )
    (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
  )
  (state_c): GatedResidualNetwork(
    (mlp): HybridSequential(
      (0): Dense(32 -> 32, linear)
      (1): ELU(
      
      )
      (2): Dense(32 -> 32, linear)
      (3): Dropout(p = 0.1, axes=())
      (4): Dense(32 -> 64, linear)
      (5): GatedLinearUnit(
      
      )
    )
    (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
  )
  (temporal_encoder): TemporalFusionEncoder(
    (encoder_lstm): HybridSequentialRNNCell(
    (0): LSTMCell(32 -> 128)
    )
    (decoder_lstm): HybridSequentialRNNCell(
    (0): LSTMCell(32 -> 128)
    )
    (gate): HybridSequential(
      (0): Dense(32 -> 64, linear)
      (1): GatedLinearUnit(
      
      )
    )
    (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
  )
  (temporal_decoder): TemporalFusionDecoder(
    (enrich): GatedResidualNetwork(
      (mlp): HybridSequential(
        (0): Dense(64 -> 32, linear)
        (1): ELU(
        
        )
        (2): Dense(32 -> 32, linear)
        (3): Dropout(p = 0.1, axes=())
        (4): Dense(32 -> 64, linear)
        (5): GatedLinearUnit(
        
        )
      )
      (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
    )
    (attention): SelfAttention(
      (dropout): Dropout(p = 0.1, axes=())
      (q_proj): Dense(32 -> 32, linear)
      (k_proj): Dense(32 -> 32, linear)
      (v_proj): Dense(32 -> 32, linear)
      (out_proj): Dense(32 -> 32, linear)
    )
    (att_net): HybridSequential(
      (0): Dropout(p = 0.1, axes=())
      (1): Dense(32 -> 64, linear)
      (2): GatedLinearUnit(
      
      )
    )
    (att_lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
    (ff_net): HybridSequential(
      (0): GatedResidualNetwork(
        (mlp): HybridSequential(
          (0): Dense(32 -> 32, linear)
          (1): ELU(
          
          )
          (2): Dense(32 -> 32, linear)
          (3): Dropout(p = 0.1, axes=())
          (4): Dense(32 -> 64, linear)
          (5): GatedLinearUnit(
          
          )
        )
        (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
      )
      (1): Dense(32 -> 64, linear)
      (2): GatedLinearUnit(
      
      )
    )
    (ff_lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
  )
  (output_proj): Dense(32 -> 3, linear)
  (loss): QuantileLoss(batch_axis=0, w=None)
), 'batch_size': 32, 'input_transform': <gluonts.transform._base.Chain object at 0x7fdace6b3760>, 'forecast_generator': <gluonts.model.forecast_generator.QuantileForecastGenerator object at 0x7fdace6b3a60>, 'output_transform': None, 'ctx': cpu(0), 'dtype': <class 'numpy.float32'>}","{'prediction_length': 1, 'lead_time': 0, 'input_names': ['past_target', 'past_observed_values', 'past_feat_dynamic_real', 'past_feat_dynamic_cat', 'feat_dynamic_real', 'feat_dynamic_cat', 'feat_static_real', 'feat_static_cat'], 'prediction_net': TemporalFusionTransformerPredictionNetwork(
  (target_proj): Dense(1 -> 32, linear)
  (past_feat_dynamic_proj): FeatureProjector(
  
  )
  (past_feat_dynamic_embed): FeatureEmbedder(
  
  )
  (feat_dynamic_proj): FeatureProjector(
  
  )
  (feat_dynamic_embed): FeatureEmbedder(
  
  )
  (feat_static_proj): FeatureProjector(
  
  )
  (feat_static_embed): FeatureEmbedder(
  
  )
  (static_selector): VariableSelectionNetwork(
    (weight_network): GatedResidualNetwork(
      (skip_proj): Dense(64 -> 2, linear)
      (mlp): HybridSequential(
        (0): Dense(64 -> 32, linear)
        (1): ELU(
        
        )
        (2): Dense(32 -> 32, linear)
        (3): Dropout(p = 0.4, axes=())
        (4): Dense(32 -> 4, linear)
        (5): GatedLinearUnit(
        
        )
      )
      (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=2)
    )
  )
  (ctx_selector): VariableSelectionNetwork(
    (weight_network): GatedResidualNetwork(
      (skip_proj): Dense(160 -> 5, linear)
      (mlp): HybridSequential(
        (0): Dense(192 -> 32, linear)
        (1): ELU(
        
        )
        (2): Dense(32 -> 32, linear)
        (3): Dropout(p = 0.4, axes=())
        (4): Dense(32 -> 10, linear)
        (5): GatedLinearUnit(
        
        )
      )
      (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=5)
    )
  )
  (tgt_selector): VariableSelectionNetwork(
    (weight_network): GatedResidualNetwork(
      (skip_proj): Dense(64 -> 2, linear)
      (mlp): HybridSequential(
        (0): Dense(96 -> 32, linear)
        (1): ELU(
        
        )
        (2): Dense(32 -> 32, linear)
        (3): Dropout(p = 0.4, axes=())
        (4): Dense(32 -> 4, linear)
        (5): GatedLinearUnit(
        
        )
      )
      (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=2)
    )
  )
  (selection): GatedResidualNetwork(
    (mlp): HybridSequential(
      (0): Dense(32 -> 32, linear)
      (1): ELU(
      
      )
      (2): Dense(32 -> 32, linear)
      (3): Dropout(p = 0.4, axes=())
      (4): Dense(32 -> 64, linear)
      (5): GatedLinearUnit(
      
      )
    )
    (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
  )
  (enrichment): GatedResidualNetwork(
    (mlp): HybridSequential(
      (0): Dense(32 -> 32, linear)
      (1): ELU(
      
      )
      (2): Dense(32 -> 32, linear)
      (3): Dropout(p = 0.4, axes=())
      (4): Dense(32 -> 64, linear)
      (5): GatedLinearUnit(
      
      )
    )
    (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
  )
  (state_h): GatedResidualNetwork(
    (mlp): HybridSequential(
      (0): Dense(32 -> 32, linear)
      (1): ELU(
      
      )
      (2): Dense(32 -> 32, linear)
      (3): Dropout(p = 0.4, axes=())
      (4): Dense(32 -> 64, linear)
      (5): GatedLinearUnit(
      
      )
    )
    (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
  )
  (state_c): GatedResidualNetwork(
    (mlp): HybridSequential(
      (0): Dense(32 -> 32, linear)
      (1): ELU(
      
      )
      (2): Dense(32 -> 32, linear)
      (3): Dropout(p = 0.4, axes=())
      (4): Dense(32 -> 64, linear)
      (5): GatedLinearUnit(
      
      )
    )
    (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
  )
  (temporal_encoder): TemporalFusionEncoder(
    (encoder_lstm): HybridSequentialRNNCell(
    (0): LSTMCell(32 -> 128)
    )
    (decoder_lstm): HybridSequentialRNNCell(
    (0): LSTMCell(32 -> 128)
    )
    (gate): HybridSequential(
      (0): Dense(32 -> 64, linear)
      (1): GatedLinearUnit(
      
      )
    )
    (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
  )
  (temporal_decoder): TemporalFusionDecoder(
    (enrich): GatedResidualNetwork(
      (mlp): HybridSequential(
        (0): Dense(64 -> 32, linear)
        (1): ELU(
        
        )
        (2): Dense(32 -> 32, linear)
        (3): Dropout(p = 0.4, axes=())
        (4): Dense(32 -> 64, linear)
        (5): GatedLinearUnit(
        
        )
      )
      (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
    )
    (attention): SelfAttention(
      (dropout): Dropout(p = 0.4, axes=())
      (q_proj): Dense(32 -> 32, linear)
      (k_proj): Dense(32 -> 32, linear)
      (v_proj): Dense(32 -> 32, linear)
      (out_proj): Dense(32 -> 32, linear)
    )
    (att_net): HybridSequential(
      (0): Dropout(p = 0.4, axes=())
      (1): Dense(32 -> 64, linear)
      (2): GatedLinearUnit(
      
      )
    )
    (att_lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
    (ff_net): HybridSequential(
      (0): GatedResidualNetwork(
        (mlp): HybridSequential(
          (0): Dense(32 -> 32, linear)
          (1): ELU(
          
          )
          (2): Dense(32 -> 32, linear)
          (3): Dropout(p = 0.4, axes=())
          (4): Dense(32 -> 64, linear)
          (5): GatedLinearUnit(
          
          )
        )
        (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
      )
      (1): Dense(32 -> 64, linear)
      (2): GatedLinearUnit(
      
      )
    )
    (ff_lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
  )
  (output_proj): Dense(32 -> 3, linear)
  (loss): QuantileLoss(batch_axis=0, w=None)
), 'batch_size': 32, 'input_transform': <gluonts.transform._base.Chain object at 0x7fdb37cada90>, 'forecast_generator': <gluonts.model.forecast_generator.QuantileForecastGenerator object at 0x7fdb37cadc40>, 'output_transform': None, 'ctx': cpu(0), 'dtype': <class 'numpy.float32'>}","{'prediction_length': 1, 'lead_time': 0, 'input_names': ['past_target', 'past_observed_values', 'past_feat_dynamic_real', 'past_feat_dynamic_cat', 'feat_dynamic_real', 'feat_dynamic_cat', 'feat_static_real', 'feat_static_cat'], 'prediction_net': TemporalFusionTransformerPredictionNetwork(
  (target_proj): Dense(1 -> 32, linear)
  (past_feat_dynamic_proj): FeatureProjector(
  
  )
  (past_feat_dynamic_embed): FeatureEmbedder(
  
  )
  (feat_dynamic_proj): FeatureProjector(
  
  )
  (feat_dynamic_embed): FeatureEmbedder(
  
  )
  (feat_static_proj): FeatureProjector(
  
  )
  (feat_static_embed): FeatureEmbedder(
  
  )
  (static_selector): VariableSelectionNetwork(
    (weight_network): GatedResidualNetwork(
      (skip_proj): Dense(64 -> 2, linear)
      (mlp): HybridSequential(
        (0): Dense(64 -> 32, linear)
        (1): ELU(
        
        )
        (2): Dense(32 -> 32, linear)
        (3): Dropout(p = 0.1, axes=())
        (4): Dense(32 -> 4, linear)
        (5): GatedLinearUnit(
        
        )
      )
      (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=2)
    )
  )
  (ctx_selector): VariableSelectionNetwork(
    (weight_network): GatedResidualNetwork(
      (skip_proj): Dense(160 -> 5, linear)
      (mlp): HybridSequential(
        (0): Dense(192 -> 32, linear)
        (1): ELU(
        
        )
        (2): Dense(32 -> 32, linear)
        (3): Dropout(p = 0.1, axes=())
        (4): Dense(32 -> 10, linear)
        (5): GatedLinearUnit(
        
        )
      )
      (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=5)
    )
  )
  (tgt_selector): VariableSelectionNetwork(
    (weight_network): GatedResidualNetwork(
      (skip_proj): Dense(64 -> 2, linear)
      (mlp): HybridSequential(
        (0): Dense(96 -> 32, linear)
        (1): ELU(
        
        )
        (2): Dense(32 -> 32, linear)
        (3): Dropout(p = 0.1, axes=())
        (4): Dense(32 -> 4, linear)
        (5): GatedLinearUnit(
        
        )
      )
      (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=2)
    )
  )
  (selection): GatedResidualNetwork(
    (mlp): HybridSequential(
      (0): Dense(32 -> 32, linear)
      (1): ELU(
      
      )
      (2): Dense(32 -> 32, linear)
      (3): Dropout(p = 0.1, axes=())
      (4): Dense(32 -> 64, linear)
      (5): GatedLinearUnit(
      
      )
    )
    (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
  )
  (enrichment): GatedResidualNetwork(
    (mlp): HybridSequential(
      (0): Dense(32 -> 32, linear)
      (1): ELU(
      
      )
      (2): Dense(32 -> 32, linear)
      (3): Dropout(p = 0.1, axes=())
      (4): Dense(32 -> 64, linear)
      (5): GatedLinearUnit(
      
      )
    )
    (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
  )
  (state_h): GatedResidualNetwork(
    (mlp): HybridSequential(
      (0): Dense(32 -> 32, linear)
      (1): ELU(
      
      )
      (2): Dense(32 -> 32, linear)
      (3): Dropout(p = 0.1, axes=())
      (4): Dense(32 -> 64, linear)
      (5): GatedLinearUnit(
      
      )
    )
    (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
  )
  (state_c): GatedResidualNetwork(
    (mlp): HybridSequential(
      (0): Dense(32 -> 32, linear)
      (1): ELU(
      
      )
      (2): Dense(32 -> 32, linear)
      (3): Dropout(p = 0.1, axes=())
      (4): Dense(32 -> 64, linear)
      (5): GatedLinearUnit(
      
      )
    )
    (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
  )
  (temporal_encoder): TemporalFusionEncoder(
    (encoder_lstm): HybridSequentialRNNCell(
    (0): LSTMCell(32 -> 128)
    )
    (decoder_lstm): HybridSequentialRNNCell(
    (0): LSTMCell(32 -> 128)
    )
    (gate): HybridSequential(
      (0): Dense(32 -> 64, linear)
      (1): GatedLinearUnit(
      
      )
    )
    (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
  )
  (temporal_decoder): TemporalFusionDecoder(
    (enrich): GatedResidualNetwork(
      (mlp): HybridSequential(
        (0): Dense(64 -> 32, linear)
        (1): ELU(
        
        )
        (2): Dense(32 -> 32, linear)
        (3): Dropout(p = 0.1, axes=())
        (4): Dense(32 -> 64, linear)
        (5): GatedLinearUnit(
        
        )
      )
      (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
    )
    (attention): SelfAttention(
      (dropout): Dropout(p = 0.1, axes=())
      (q_proj): Dense(32 -> 32, linear)
      (k_proj): Dense(32 -> 32, linear)
      (v_proj): Dense(32 -> 32, linear)
      (out_proj): Dense(32 -> 32, linear)
    )
    (att_net): HybridSequential(
      (0): Dropout(p = 0.1, axes=())
      (1): Dense(32 -> 64, linear)
      (2): GatedLinearUnit(
      
      )
    )
    (att_lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
    (ff_net): HybridSequential(
      (0): GatedResidualNetwork(
        (mlp): HybridSequential(
          (0): Dense(32 -> 32, linear)
          (1): ELU(
          
          )
          (2): Dense(32 -> 32, linear)
          (3): Dropout(p = 0.1, axes=())
          (4): Dense(32 -> 64, linear)
          (5): GatedLinearUnit(
          
          )
        )
        (lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
      )
      (1): Dense(32 -> 64, linear)
      (2): GatedLinearUnit(
      
      )
    )
    (ff_lnorm): LayerNorm(eps=1e-05, axis=-1, center=True, scale=True, in_channels=32)
  )
  (output_proj): Dense(32 -> 3, linear)
  (loss): QuantileLoss(batch_axis=0, w=None)
), 'batch_size': 32, 'input_transform': <gluonts.transform._base.Chain object at 0x7fdace3307f0>, 'forecast_generator': <gluonts.model.forecast_generator.QuantileForecastGenerator object at 0x7fdace330d30>, 'output_transform': None, 'ctx': cpu(0), 'dtype': <class 'numpy.float32'>}"
mlp,"MLPRegressor(activation='logistic', hidden_layer_sizes=15, max_iter=1000)","MLPRegressor(activation='logistic', hidden_layer_sizes=15, max_iter=1000)","MLPRegressor(activation='logistic', hidden_layer_sizes=10, max_iter=1000)","MLPRegressor(activation='logistic', hidden_layer_sizes=20, max_iter=1000)","MLPRegressor(activation='logistic', hidden_layer_sizes=10, max_iter=1000)","MLPRegressor(activation='logistic', hidden_layer_sizes=15, max_iter=1000)"
rf,"RandomForestRegressor(min_samples_leaf=5, n_jobs=-1)","RandomForestRegressor(min_samples_leaf=5, min_samples_split=15,
                      n_estimators=1000, n_jobs=-1)","RandomForestRegressor(min_samples_split=15, n_jobs=-1)",RandomForestRegressor(n_jobs=-1),"RandomForestRegressor(min_samples_split=5, n_estimators=500, n_jobs=-1)",RandomForestRegressor(n_jobs=-1)
svr,"SVR(C=1000, epsilon=0.001, gamma=0.01)","SVR(C=10000, epsilon=0.0001, gamma=0.01, kernel='sigmoid')","SVR(C=100, epsilon=0.0001, gamma=0.01)","SVR(C=100, epsilon=0.0001, gamma=0.01)","SVR(C=1000, epsilon=0.0001, gamma=0.001)","SVR(C=10, epsilon=0.0001, gamma=0.1, kernel='sigmoid')"
xgboost,"{'n_estimators': 200, 'objective': 'reg:squarederror', 'max_depth': 3, 'max_leaves': None, 'max_bin': None, 'grow_policy': None, 'learning_rate': 0.01, 'verbosity': None, 'booster': None, 'tree_method': None, 'gamma': 5, 'min_child_weight': None, 'max_delta_step': None, 'subsample': 0.6, 'sampling_method': None, 'colsample_bytree': 0.6, 'colsample_bylevel': None, 'colsample_bynode': None, 'reg_alpha': 10, 'reg_lambda': 0.1, 'scale_pos_weight': None, 'base_score': None, 'missing': nan, 'num_parallel_tree': None, 'random_state': None, 'n_jobs': None, 'monotone_constraints': None, 'interaction_constraints': None, 'importance_type': None, 'gpu_id': None, 'validate_parameters': None, 'predictor': None, 'enable_categorical': False, 'max_cat_to_onehot': None, 'eval_metric': None, 'early_stopping_rounds': None, 'callbacks': None, '_Booster': <xgboost.core.Booster object at 0x7fdacf9b15e0>}","{'n_estimators': 200, 'objective': 'reg:squarederror', 'max_depth': 10, 'max_leaves': None, 'max_bin': None, 'grow_policy': None, 'learning_rate': 0.01, 'verbosity': None, 'booster': None, 'tree_method': None, 'gamma': 1, 'min_child_weight': None, 'max_delta_step': None, 'subsample': 0.6, 'sampling_method': None, 'colsample_bytree': 0.8, 'colsample_bylevel': None, 'colsample_bynode': None, 'reg_alpha': 0.01, 'reg_lambda': 10, 'scale_pos_weight': None, 'base_score': None, 'missing': nan, 'num_parallel_tree': None, 'random_state': None, 'n_jobs': None, 'monotone_constraints': None, 'interaction_constraints': None, 'importance_type': None, 'gpu_id': None, 'validate_parameters': None, 'predictor': None, 'enable_categorical': False, 'max_cat_to_onehot': None, 'eval_metric': None, 'early_stopping_rounds': None, 'callbacks': None, '_Booster': <xgboost.core.Booster object at 0x7fdacfd17730>}","{'n_estimators': 200, 'objective': 'reg:squarederror', 'max_depth': 3, 'max_leaves': None, 'max_bin': None, 'grow_policy': None, 'learning_rate': 0.01, 'verbosity': None, 'booster': None, 'tree_method': None, 'gamma': 10, 'min_child_weight': None, 'max_delta_step': None, 'subsample': 0.8, 'sampling_method': None, 'colsample_bytree': 0.8, 'colsample_bylevel': None, 'colsample_bynode': None, 'reg_alpha': 0.01, 'reg_lambda': 10, 'scale_pos_weight': None, 'base_score': None, 'missing': nan, 'num_parallel_tree': None, 'random_state': None, 'n_jobs': None, 'monotone_constraints': None, 'interaction_constraints': None, 'importance_type': None, 'gpu_id': None, 'validate_parameters': None, 'predictor': None, 'enable_categorical': False, 'max_cat_to_onehot': None, 'eval_metric': None, 'early_stopping_rounds': None, 'callbacks': None, '_Booster': <xgboost.core.Booster object at 0x7fdacf0d9fd0>}","{'n_estimators': 200, 'objective': 'reg:squarederror', 'max_depth': 10, 'max_leaves': None, 'max_bin': None, 'grow_policy': None, 'learning_rate': 0.01, 'verbosity': None, 'booster': None, 'tree_method': None, 'gamma': 10, 'min_child_weight': None, 'max_delta_step': None, 'subsample': 0.8, 'sampling_method': None, 'colsample_bytree': 0.4, 'colsample_bylevel': None, 'colsample_bynode': None, 'reg_alpha': 0.1, 'reg_lambda': 10, 'scale_pos_weight': None, 'base_score': None, 'missing': nan, 'num_parallel_tree': None, 'random_state': None, 'n_jobs': None, 'monotone_constraints': None, 'interaction_constraints': None, 'importance_type': None, 'gpu_id': None, 'validate_parameters': None, 'predictor': None, 'enable_categorical': False, 'max_cat_to_onehot': None, 'eval_metric': None, 'early_stopping_rounds': None, 'callbacks': None, '_Booster': <xgboost.core.Booster object at 0x7fdacdabeac0>}","{'n_estimators': 200, 'objective': 'reg:squarederror', 'max_depth': 10, 'max_leaves': None, 'max_bin': None, 'grow_policy': None, 'learning_rate': 0.01, 'verbosity': None, 'booster': None, 'tree_method': None, 'gamma': 10, 'min_child_weight': None, 'max_delta_step': None, 'subsample': 0.6, 'sampling_method': None, 'colsample_bytree': 0.8, 'colsample_bylevel': None, 'colsample_bynode': None, 'reg_alpha': 0.1, 'reg_lambda': 10, 'scale_pos_weight': None, 'base_score': None, 'missing': nan, 'num_parallel_tree': None, 'random_state': None, 'n_jobs': None, 'monotone_constraints': None, 'interaction_constraints': None, 'importance_type': None, 'gpu_id': None, 'validate_parameters': None, 'predictor': None, 'enable_categorical': False, 'max_cat_to_onehot': None, 'eval_metric': None, 'early_stopping_rounds': None, 'callbacks': None, '_Booster': <xgboost.core.Booster object at 0x7fdacfe8bb50>}","{'n_estimators': 200, 'objective': 'reg:squarederror', 'max_depth': 3, 'max_leaves': None, 'max_bin': None, 'grow_policy': None, 'learning_rate': 0.01, 'verbosity': None, 'booster': None, 'tree_method': None, 'gamma': 10, 'min_child_weight': None, 'max_delta_step': None, 'subsample': 0.8, 'sampling_method': None, 'colsample_bytree': 0.8, 'colsample_bylevel': None, 'colsample_bynode': None, 'reg_alpha': 0.01, 'reg_lambda': 10, 'scale_pos_weight': None, 'base_score': None, 'missing': nan, 'num_parallel_tree': None, 'random_state': None, 'n_jobs': None, 'monotone_constraints': None, 'interaction_constraints': None, 'importance_type': None, 'gpu_id': None, 'validate_parameters': None, 'predictor': None, 'enable_categorical': False, 'max_cat_to_onehot': None, 'eval_metric': None, 'early_stopping_rounds': None, 'callbacks': None, '_Booster': <xgboost.core.Booster object at 0x7fdacfe8b0a0>}"
